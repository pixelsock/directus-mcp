{
  "name": "directus-mcp-rules",
  "description": "Rules for the Directus MCP extended server",
  "rules": {
    "project_overview": {
      "description": "Provides a high-level overview of the project",
      "content": "This is an MCP server implementation for Directus API integration. It provides tools for interacting with Directus CMS, allowing for operations like getting items from collections, creating, updating, and deleting items, and accessing system information."
    },
    "technology_stack": {
      "description": "Specifies the core technologies used in the project",
      "content": "The project uses Node.js and TypeScript. It utilizes the Model Context Protocol TypeScript SDK (@modelcontextprotocol/sdk) for building the MCP server and Axios for making HTTP requests to the Directus API."
    },
    "api_structure": {
      "description": "Describes the API functionality provided by the server",
      "content": "The server provides tools for interacting with Directus API, including: getItems (fetching items from collections), getItem (retrieving a specific item by ID), createItem (creating new items), updateItem (modifying existing items), deleteItem (removing items), and various system information and utility tools like getSystemInfo, getCollections, getFields, getRelations, etc."
    },
    "authentication": {
      "description": "Explains how authentication works with Directus",
      "content": "The server supports authentication with Directus through access tokens. It has default credentials configured but also allows providing custom credentials. The login tool can be used to obtain a new authentication token."
    },
    "error_handling": {
      "description": "Describes how errors are handled",
      "content": "API errors are caught and formatted into user-friendly messages. Each tool implementation includes try-catch blocks to handle exceptions gracefully."
    },
    "usage_examples": {
      "description": "Provides examples of how to use the MCP server",
      "content": "Example: To fetch items from a collection, use the getItems tool with parameters like collection name and optional query parameters. To create a new item, use createItem with collection name and item data."
    }
  }
} 